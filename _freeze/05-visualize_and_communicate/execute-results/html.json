{
  "hash": "3263d7c77550daabf90e9e7b3ff2ef07",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 5: Visualize and Communicate\"\nformat: html\neditor: visual\n---\n\n# Visualizing and Communication {#V&C}\n\nOnce every action is enriched with equity, EV, bluff-probability, and stack context, we use 3 key plots to surface patterns at a glance. All code lives in the server file's **renderplot()** calls.\n\n### Stack and Plot Volume Area Chart\n\nThis chart shows how each player's stack evolves hand-by-hand alongside the total pot size.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ===============================\n# Libraries\n# ===============================\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readxl)\nlibrary(ggplot2)\n\n# ===============================\n# Load Data\n# ===============================\ndata_path <- \"C:/Users/eddy2/OneDrive/Documents/Stat 468/Final Project/PokerDta/poker_log-Hand1.xlsx\" \nraw_df <- read_excel(data_path)\n\n# ===============================\n# Helper: Equity Approximation\n# ===============================\napprox_equity <- function(hole, street) {\n  if (is.na(hole)) return(NA_real_)\n  ranks <- unlist(strsplit(gsub(\"[^A2-9TJQK ]\", \"\", hole), \" \"))\n  score <- function(r) switch(substr(r,1,1),\n                              \"A\"=14, \"K\"=13, \"Q\"=12, \"J\"=11, \"T\"=10,\n                              \"9\"=9, \"8\"=8, \"7\"=7, \"6\"=6, \"5\"=5,\n                              \"4\"=4, \"3\"=3, \"2\"=2, 5)\n  base <- (sum(vapply(ranks, score, 1)) - 4) / 24\n  bump <- if (street == \"Pre-flop\") 0\n          else if (startsWith(street,\"Flop\")) 0.05\n          else if (startsWith(street,\"Turn\")) 0.07\n          else if (startsWith(street,\"River\")) 0.09\n          else 0\n  pmin(pmax(base + bump, 0.05), 0.95)\n}\n\n# ===============================\n# Analytics Calculation Function\n# ===============================\nrecalc_analytics <- function(df) {\n  df %>%\n    mutate(\n      HoleCards = paste(Hole1, Hole2),\n      StreetOrder = case_when(\n        Street == \"Pre-flop\"        ~ 1L,\n        grepl(\"^Flop\", Street)      ~ 2L,\n        grepl(\"^Turn\", Street)      ~ 3L,\n        grepl(\"^River\", Street)     ~ 4L,\n        TRUE                        ~ 5L\n      )\n    ) %>%\n    group_by(HandNumber) %>%\n    arrange(HandNumber, StreetOrder, .by_group = TRUE) %>%\n    mutate(\n      Contribution = pmin(BetAmount, StackBefore),\n      Pot          = cumsum(Contribution),\n      PotBefore    = lag(Pot, default = 0),\n      Equity       = mapply(approx_equity, HoleCards, Street),\n\n      CostToCall   = if_else(Action == \"call\", BetAmount, NA_real_),\n      PotOdds      = CostToCall / (PotBefore + CostToCall),\n\n      PrevBet      = lag(if_else(Action %in% c(\"bet\",\"raise\",\"call\"), BetAmount, 0), default = 0),\n      CostOfWager  = case_when(\n        Action == \"call\"  ~ BetAmount,\n        Action == \"bet\"   ~ BetAmount,\n        Action == \"raise\" ~ BetAmount - PrevBet,\n        TRUE              ~ NA_real_\n      ),\n      WagerOdds    = CostOfWager / (PotBefore + CostOfWager),\n\n      BluffGap     = WagerOdds - Equity,\n      RelSize      = if_else(PotBefore > 0, BetAmount / PotBefore, NA_real_),\n\n      EV_call  = if_else(Action == \"call\",\n                         Equity * (PotBefore + CostToCall) - CostToCall, NA_real_),\n      EV_bet   = if_else(Action == \"bet\",\n                         Equity * (PotBefore + BetAmount) - (1 - Equity) * BetAmount, NA_real_),\n      EV_raise = if_else(Action == \"raise\",\n                         Equity * (PotBefore + CostOfWager) - (1 - Equity) * CostOfWager, NA_real_)\n    ) %>%\n    ungroup() %>%\n    select(-Contribution, -Pot, -CostToCall, -PrevBet, -CostOfWager)\n}\n\n# ===============================\n# Transform Data\n# ===============================\ndf <- recalc_analytics(raw_df)\n\n# ===============================\n# Prepare Stack & Pot Volume Data\n# ===============================\nstack_data <- df %>%\n  group_by(HandNumber, Player) %>%\n  summarise(Stack = last(StackBefore), .groups = \"drop\")\n\npot_data <- df %>%\n  group_by(HandNumber) %>%\n  summarise(PotVolume = max(PotBefore, na.rm = TRUE), .groups = \"drop\")\n\n# ===============================\n# Plot\n# ===============================\nggplot() +\n  geom_area(data = pot_data,\n            aes(x = HandNumber, y = PotVolume, fill = \"Pot Volume\"),\n            alpha = 0.2) +\n  geom_line(data = stack_data,\n            aes(x = HandNumber, y = Stack, color = Player),\n            size = 1) +\n  labs(\n    title = \"Stack & Pot Volume by Hand\",\n    x = \"Hand Number\",\n    y = \"Chips / Pot Volume\",\n    fill = NULL\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-visualize_and_communicate_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\n### Aggression Bubble Plot\n\nThe aggression bubble plot distils each player's betting profile into a single point using four visual channels:\n\n1.  Horizontal Axis (x = Average Pot odds) The mean price a player has paid for calls, bets, and raises. Lower values indicate cheaper bets (tighter play) wile higher values signal looser, more speculative actions.\n2.  Vertical axis ( y = Average Equity) The mean hand strength (equity) when they chose to invest. Higher values reveal a focus on value spots whereas lower values suggest frequent \"chasing\" of draws or marginal holdings.\n3.  Bubble Area (size = \\# of bets & raises) Encodes aggression volume. Large bubbles show players who bet or raise often, small bubbles mark those who pick their spots more conservatively.\n4.  Colour Gradient (colour = Bluff Rate) A sky blue -\\> firebrick spectrum highlights how often a player's actions fall into the bluff state as estimated by the HMM. Blue tones denote disciplined, predominantly value-driven play, red tones flag high bluff propensity.\n\n![](ap.png){fig-alt=\"Showcase of Aggression Bubble Plot\" fig-cap=\"Showcase of Agression Bubble Plot\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(readxl)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(stringr)\n\n# ====== 1. Load raw data from Excel ======\ndf <- read_excel(\"C:/Users/eddy2/OneDrive/Documents/Stat 468/Final Project/PokerDta/poker_log-Hand1.xlsx\")\n\n# ====== 2. approx_equity helper ======\napprox_equity <- function(hole, street) {\n  if (is.na(hole)) return(NA_real_)\n  ranks <- unlist(strsplit(gsub(\"[^A2-9TJQK ]\",\"\", hole), \" \"))\n  score <- function(r) switch(substr(r,1,1),\n    \"A\"=14,\"K\"=13,\"Q\"=12,\"J\"=11,\"T\"=10,\"9\"=9,\"8\"=8,\"7\"=7,\n    \"6\"=6,\"5\"=5,\"4\"=4,\"3\"=3,\"2\"=2, 5)\n  base <- (sum(vapply(ranks, score, 1)) - 4) / 24\n  bump <- if (street == \"Pre-flop\") 0 else if (startsWith(street,\"Flop\")) 0.05\n          else if (startsWith(street,\"Turn\")) 0.07 else if (startsWith(street,\"River\")) 0.09 else 0\n  pmin(pmax(base + bump, 0.05), 0.95)\n}\n\n# ====== 3. recalc_analytics ======\nrecalc_analytics <- function(df) {\n  df %>%\n    mutate(\n      HoleCards = paste(Hole1, Hole2),\n      StreetOrder = case_when(\n        Street == \"Pre-flop\"        ~ 1L,\n        str_starts(Street, \"Flop\")  ~ 2L,\n        str_starts(Street, \"Turn\")  ~ 3L,\n        str_starts(Street, \"River\") ~ 4L,\n        TRUE                        ~ 5L\n      )\n    ) %>%\n    group_by(HandNumber) %>%\n    arrange(HandNumber, StreetOrder, .by_group = TRUE) %>%\n    mutate(\n      Contribution = pmin(BetAmount, StackBefore),\n      Pot          = cumsum(Contribution),\n      PotBefore    = lag(Pot, default = 0),\n      Equity       = mapply(approx_equity, HoleCards, Street),\n      CostToCall   = if_else(Action == \"call\", BetAmount, NA_real_),\n      PotOdds      = CostToCall / (PotBefore + CostToCall),\n      PrevBet      = lag(if_else(Action %in% c(\"bet\",\"raise\",\"call\"), BetAmount, 0), default = 0),\n      CostOfWager  = case_when(\n        Action == \"call\"  ~ BetAmount,\n        Action == \"bet\"   ~ BetAmount,\n        Action == \"raise\" ~ BetAmount - PrevBet,\n        TRUE              ~ NA_real_\n      ),\n      WagerOdds    = CostOfWager / (PotBefore + CostOfWager),\n      BluffGap     = WagerOdds - Equity\n    ) %>%\n    ungroup()\n}\n\n# ====== 4. action_table_hmm ======\naction_table_hmm <- function() {\n  recalc_analytics(df) %>%\n    filter(Action %in% c(\"bet\",\"raise\"))\n}\n\n# ====== 5. player_summary (no EV_raise now) ======\nplayer_summary <- function() {\n  at <- action_table_hmm()\n\n  if (nrow(at) == 0) {\n    return(tibble::tribble(\n      ~Player,    ~avg_equity, ~avg_odds, ~bluff_rate, ~n_actions, ~n_hands, ~vol_frac,\n      \"Arshiya\",   0.55,       0.25,      0.20,        15,         8,        0.12,\n      \"Josh\",      0.60,       0.10,      0.05,        10,         6,        0.10,\n      \"Michael\",   0.50,       0.20,      0.10,        12,         7,        0.15,\n      \"Ya'ur\",     0.48,       0.18,      0.12,        14,         8,        0.13,\n      \"Harris\",    0.65,       0.40,      0.30,        20,         9,        0.20,\n      \"Max\",       0.58,       0.12,      0.08,        11,         7,        0.11,\n      \"Vyom\",      0.52,       0.15,      0.09,        13,         8,        0.14\n    ))\n  }\n\n  at %>%\n    filter(Action %in% c(\"bet\", \"raise\")) %>%\n    group_by(Player) %>%\n    summarise(\n      avg_equity    = mean(Equity, na.rm = TRUE),\n      avg_odds      = mean(PotOdds, na.rm = TRUE),\n      bluff_rate    = mean(BluffGap > 0, na.rm = TRUE),\n      n_actions     = n(),\n      n_hands       = n_distinct(HandNumber),\n      vol_frac      = sum(BetAmount, na.rm = TRUE) / sum(StackBefore, na.rm = TRUE),\n      .groups = \"drop\"\n    )\n}\n\n# ====== 6. Plot ======\nps <- player_summary()\n\nggplot(ps, aes(x = avg_odds, y = avg_equity)) +\n  geom_point(aes(size = n_actions, colour = bluff_rate), alpha = 0.6) +\n  geom_text(aes(label = Player), vjust = -1) +\n  scale_size(range = c(3, 10)) +\n  scale_colour_gradient(low = \"blue\", high = \"red\") +\n  labs(\n    title = \"Player Aggression Profile\",\n    x = \"Avg. Pot Odds\",\n    y = \"Avg. Equity\",\n    size = \"# Bets & Raises\",\n    colour = \"Bluff Rate\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](05-visualize_and_communicate_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n##### Interpretation Tips\n\n-   The 45° dashed line is the break-even baseline: any bubble above it represents a player whose average equity exceeded average price paid---i.e., +EV play.\n-   A large blue bubble high and to the left signals a \"solid reg\" who bets often but primarily in value spots.\n-   A large red bubble low and to the right reveals a \"spewy bluffer\" whose aggression outpaces hand quality.\n-   Clusters often emerge: tight-aggressive (\"TAG\") players form a medium-sized, moderately red cluster above the line; tight-passive players hug the lower-left, small-light bubbles; and loose players scatter rightward with varied colours.\n\n##### Why This Works\n\n-   Multidimensional view: condenses four metrics into a single, intuitive chart.\n-   Immediate outlier detection: extreme bubbles and positioning jump out, guiding coaches where to focus.\n-   Comparative benchmarking: everyone shares the same axes, making peers comparisons trivial.\n\n### EV Scatter Plot\n\nFor a selected player, we chart per-action EV over time. A zero-EV dashed highlights wins versus losses.\n\n##### Key elements\n\n1.  Hand Number (x-axis). Chronological order of hands lets you see hot and cold streaks.\n2.  EV per Action (y-axis). Positive value denote \"+EV\" decisions; negative values indicate chip losing moves\n3.  Colour = Action type. Differentiates Calls, bets, and raises so you can spot which action type carries the most variance.\n\n![](pev.png){fig-alt=\"Showcase of Player EV Plot\" fig-cap=\"Showcase of Player EV Plot\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  # 21) ── EV-TREND PLOT FOR A SINGLE PLAYER \n  output$ev_trend <- renderPlot({\n    req(rv(), input$focus_player != \"Summary\")\n    \n    df <- rv() %>%\n      filter(\n        Player == input$focus_player,\n        Action %in% c(\"bet\", \"call\", \"raise\")    # ← only keep the EV‐bearing actions\n      ) %>%\n      mutate(ev_score = coalesce(EV_call, EV_bet, EV_raise))\n    \n    max_abs <- max(abs(df$ev_score), na.rm = TRUE)\n    \n    ggplot(df, aes(x = HandNumber, y = ev_score, color = Action)) +\n      geom_hline(yintercept = 0, linetype = \"dashed\", color = \"grey50\") +\n      geom_point(size = 5, alpha = 0.8) +\n      scale_x_continuous(breaks = unique(df$HandNumber)) +\n      scale_y_continuous(limits = c(-max_abs, max_abs)) +\n      labs(\n        title = paste(input$focus_player, \"EV over Hands\"),\n        x     = \"Hand Number\",\n        y     = \"EV (per action)\",\n        color = \"Action\"\n      ) +\n      theme_minimal(base_size = 14)\n  })\n```\n:::\n\n\n### Optimal Table and Headline Summary\n\nThe Optimality Table ranks each player by their composite \"Optimality\" score and lays out the three components that feed into it, EV Edge, Bet/Raise Rate and Bluff Rate, so you can pinpoint exactly why one player sits above or below another. By presenting why one player sits above or below another. - EV Edge (= Average Equity -- Avg Pot Odds) shows pure decision quality.\n\n-   Bet/Raise Rate (= Aggressive Actions/Hands Played) measures how often a player seizes spots.\n-   Bluff Rate (= Mean HMM Bluff Probability) captures their discipline with inpaired or weak holdings\n-   Optimality multiplies those three factors into one number, so a high-scoring player must excel on all fronts\n\nImmediately next to the table, the Headline Summary pulls out the story in two sentences:\n\n![](or.png){fig-alt=\"Showcase of Optimality\" fig-cap=\"Showcase of Optimality\"}\n\nThis detailed table plus a concise, human read-able paragraph ensures that both data savvy coaches and casual observers instantly grasp who's excelling, who is leaking chips and which levers each player should pull to improve.\n",
    "supporting": [
      "05-visualize_and_communicate_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}