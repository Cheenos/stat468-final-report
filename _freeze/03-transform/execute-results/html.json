{
  "hash": "6adb8137e13675e7f844fc63edd8839c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chapter 3: Transform\"\nformat: html\neditor: visual\n---\n\n# Transform {#Transform}\n\nAfter the tidy step every action sits in a long data frame with the raw columns HandNumber, Dealer, Player, Hole Card 1 and 2, Action, BetAmount, StackBefore, Street. The bulk of the transforming uses the function **recalc_analytics** which enriches the table with quantitative features that power every later model and plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## Load packages\nlibrary(dplyr)\nlibrary(stringr)\nlibrary(tibble)\nlibrary(knitr)\n\n## Example raw data\nbefore_df <- tibble::tribble(\n  ~HandNumber, ~Street,                        ~Action, ~BetAmount, ~StackBefore, ~Hole1, ~Hole2,\n  1001,        \"Pre-flop\",                     \"bet\",          6,          100,     \"Ah\",  \"Kd\",\n  1001,        \"Pre-flop\",                     \"call\",         6,          120,     \"Qs\",  \"Qh\",\n  1001,        \"Flop: [Ah Kd 7c]\",             \"raise\",       18,          114,     \"Ah\",  \"Kd\",\n  1001,        \"Turn: [Ah Kd 7c] 3s\",          \"call\",        18,          102,     \"Qs\",  \"Qh\",\n  1001,        \"River: [Ah Kd 7c 3s] Qh\",      \"bet\",         30,           84,     \"Ah\",  \"Kd\",\n  1002,        \"Pre-flop\",                     \"bet\",          4,           90,     \"9c\",  \"9d\",\n  1002,        \"Flop: [2c 7d 9s]\",             \"call\",         4,           76,     \"Jc\",  \"Tc\",\n  1002,        \"Turn: [2c 7d 9s] As\",          \"raise\",       12,           72,     \"Jc\",  \"Tc\",\n  1002,        \"River: [2c 7d 9s As] Qd\",      \"call\",        12,           60,     \"9c\",  \"9d\"\n)\n\n## Supporting equity function\napprox_equity <- function(hole, street) {\n  if (is.na(hole)) return(NA_real_)\n  ranks <- unlist(strsplit(gsub(\"[^A2-9TJQK ]\",\"\", hole), \" \"))\n  score <- function(r) switch(substr(r,1,1),\n    \"A\"=14,\"K\"=13,\"Q\"=12,\"J\"=11,\"T\"=10,\"9\"=9,\"8\"=8,\"7\"=7,\"6\"=6,\"5\"=5,\"4\"=4,\"3\"=3,\"2\"=2, 5)\n  base <- (sum(vapply(ranks, score, 1)) - 4) / 24\n  bump <- if (street == \"Pre-flop\") 0 else if (startsWith(street,\"Flop\")) 0.05\n          else if (startsWith(street,\"Turn\")) 0.07 else if (startsWith(street,\"River\")) 0.09 else 0\n  pmin(pmax(base + bump, 0.05), 0.95)\n}\n\n## Main function\nrecalc_analytics <- function(df) {\n  df %>%\n    mutate(\n      HoleCards = paste(Hole1, Hole2),\n      StreetOrder = case_when(\n        Street == \"Pre-flop\"        ~ 1L,\n        str_starts(Street, \"Flop\")  ~ 2L,\n        str_starts(Street, \"Turn\")  ~ 3L,\n        str_starts(Street, \"River\") ~ 4L,\n        TRUE                        ~ 5L\n      )\n    ) %>%\n    group_by(HandNumber) %>%\n    arrange(HandNumber, StreetOrder, .by_group = TRUE) %>%\n    mutate(\n      Contribution = pmin(BetAmount, StackBefore),\n      Pot          = cumsum(Contribution),\n      PotBefore    = lag(Pot, default = 0),\n      Equity       = mapply(approx_equity, HoleCards, Street),\n\n      CostToCall   = if_else(Action == \"call\", BetAmount, NA_real_),\n      PotOdds      = CostToCall / (PotBefore + CostToCall),\n\n      PrevBet      = lag(if_else(Action %in% c(\"bet\",\"raise\",\"call\"), BetAmount, 0), default = 0),\n      CostOfWager  = case_when(\n        Action == \"call\"  ~ BetAmount,\n        Action == \"bet\"   ~ BetAmount,\n        Action == \"raise\" ~ BetAmount - PrevBet,\n        TRUE              ~ NA_real_\n      ),\n      WagerOdds    = CostOfWager / (PotBefore + CostOfWager),\n\n      BluffGap     = WagerOdds - Equity,\n      RelSize      = if_else(PotBefore > 0, BetAmount / PotBefore, NA_real_),\n\n      EV_call  = if_else(Action == \"call\",\n                         Equity * (PotBefore + CostToCall) - CostToCall, NA_real_),\n      EV_bet   = if_else(Action == \"bet\",\n                         Equity * (PotBefore + BetAmount) - (1 - Equity) * BetAmount, NA_real_),\n      EV_raise = if_else(Action == \"raise\",\n                         Equity * (PotBefore + CostOfWager) - (1 - Equity) * CostOfWager, NA_real_)\n    ) %>%\n    ungroup() %>%\n    select(-Contribution, -Pot, -CostToCall, -PrevBet, -CostOfWager)\n}\n\n## Output\nkable(before_df, caption = \"Before: Raw hand actions\")\n```\n\n::: {.cell-output-display}\n\n\nTable: Before: Raw hand actions\n\n| HandNumber|Street                  |Action | BetAmount| StackBefore|Hole1 |Hole2 |\n|----------:|:-----------------------|:------|---------:|-----------:|:-----|:-----|\n|       1001|Pre-flop                |bet    |         6|         100|Ah    |Kd    |\n|       1001|Pre-flop                |call   |         6|         120|Qs    |Qh    |\n|       1001|Flop: [Ah Kd 7c]        |raise  |        18|         114|Ah    |Kd    |\n|       1001|Turn: [Ah Kd 7c] 3s     |call   |        18|         102|Qs    |Qh    |\n|       1001|River: [Ah Kd 7c 3s] Qh |bet    |        30|          84|Ah    |Kd    |\n|       1002|Pre-flop                |bet    |         4|          90|9c    |9d    |\n|       1002|Flop: [2c 7d 9s]        |call   |         4|          76|Jc    |Tc    |\n|       1002|Turn: [2c 7d 9s] As     |raise  |        12|          72|Jc    |Tc    |\n|       1002|River: [2c 7d 9s As] Qd |call   |        12|          60|9c    |9d    |\n\n\n:::\n\n```{.r .cell-code}\nafter_df <- recalc_analytics(before_df)\nkable(after_df, caption = \"After: Derived analytics\")\n```\n\n::: {.cell-output-display}\n\n\nTable: After: Derived analytics\n\n| HandNumber|Street                  |Action | BetAmount| StackBefore|Hole1 |Hole2 |HoleCards | StreetOrder| PotBefore|    Equity| PotOdds| WagerOdds|   BluffGap| RelSize|   EV_call|     EV_bet| EV_raise|\n|----------:|:-----------------------|:------|---------:|-----------:|:-----|:-----|:---------|-----------:|---------:|---------:|-------:|---------:|----------:|-------:|---------:|----------:|--------:|\n|       1001|Pre-flop                |bet    |         6|         100|Ah    |Kd    |Ah Kd     |           1|         0| 0.9500000|      NA| 1.0000000|  0.0500000|      NA|        NA|  5.4000000|       NA|\n|       1001|Pre-flop                |call   |         6|         120|Qs    |Qh    |Qs Qh     |           1|         6| 0.8333333|   0.500| 0.5000000| -0.3333333|   1.000|  4.000000|         NA|       NA|\n|       1001|Flop: [Ah Kd 7c]        |raise  |        18|         114|Ah    |Kd    |Ah Kd     |           2|        12| 0.9500000|      NA| 0.5000000| -0.4500000|   1.500|        NA|         NA|    22.20|\n|       1001|Turn: [Ah Kd 7c] 3s     |call   |        18|         102|Qs    |Qh    |Qs Qh     |           3|        30| 0.9033333|   0.375| 0.3750000| -0.5283333|   0.600| 25.360000|         NA|       NA|\n|       1001|River: [Ah Kd 7c 3s] Qh |bet    |        30|          84|Ah    |Kd    |Ah Kd     |           4|        48| 0.9500000|      NA| 0.3846154| -0.5653846|   0.625|        NA| 72.6000000|       NA|\n|       1002|Pre-flop                |bet    |         4|          90|9c    |9d    |9c 9d     |           1|         0| 0.5833333|      NA| 1.0000000|  0.4166667|      NA|        NA|  0.6666667|       NA|\n|       1002|Flop: [2c 7d 9s]        |call   |         4|          76|Jc    |Tc    |Jc Tc     |           2|         4| 0.7583333|   0.500| 0.5000000| -0.2583333|   1.000|  2.066667|         NA|       NA|\n|       1002|Turn: [2c 7d 9s] As     |raise  |        12|          72|Jc    |Tc    |Jc Tc     |           3|         8| 0.7783333|      NA| 0.5000000| -0.2783333|   1.500|        NA|         NA|    10.68|\n|       1002|River: [2c 7d 9s As] Qd |call   |        12|          60|9c    |9d    |9c 9d     |           4|        20| 0.6733333|   0.375| 0.3750000| -0.2983333|   0.600|  9.546667|         NA|       NA|\n\n\n:::\n:::\n\n\n| New column       | Formula (chips)                                                                                                                                                               | Intuition                                              |\n|:----------------|:-------------------------------------|:----------------|\n| **Contribution** | `pmin(BetAmount, StackBefore)`                                                                                                                                                | The most a player can **actually** put in this street. |\n| **Pot**          | `cumsum(Contribution)`<br/>*(within each hand)*                                                                                                                               | Running pot size after the current action.             |\n| **PotBefore**    | `lag(Pot, default = 0)`                                                                                                                                                       | Pot size just before a player acts.                    |\n| **CostToCall**   | `if_else(Action == \"call\", BetAmount, NA_real_)`                                                                                                                              | Amount needed to continue when facing a bet.           |\n| **PotOdds**      | `CostToCall / (PotBefore + CostToCall)`                                                                                                                                       | Price being laid for a call.                           |\n| **PrevBet**      | `lag(if_else(Action %in% c(\"bet\",\"raise\",\"call\"), BetAmount, 0), default = 0)`                                                                                                | Used to isolate the incremental part of a raise.       |\n| **CostOfWager**  | `case_when(` <br/>`Action == \"call\"  ~ BetAmount,` <br/>`Action == \"bet\"   ~ BetAmount,` <br/>`Action == \"raise\" ~ BetAmount - PrevBet,` <br/>`TRUE              ~ NA_real_)` | True amount risked (bet, call, or raise -- PrevBet).   |\n| **WagerOdds**    | `CostOfWager / (PotBefore + CostOfWager)`                                                                                                                                     | Price a bettor is offering the table.                  |\n| **BluffGap**     | `WagerOdds - Equity`                                                                                                                                                          | Margin between price offered and hand strength.        |\n| **RelSize**      | `if_else(PotBefore > 0, BetAmount / PotBefore, NA_real_)`                                                                                                                     | Bet size expressed as a fraction of the pot.           |\n| **EV_call**      | `if_else(Action == \"call\", Equity * (PotBefore + CostToCall) - CostToCall, NA_real_)`                                                                                         | Classic expectation of a call.                         |\n| **EV_bet**       | `if_else(Action == \"bet\", Equity * (PotBefore + BetAmount) - (1 - Equity) * BetAmount, NA_real_)`                                                                             | Expected value of an outright bet.                     |\n| **EV_raise**     | `if_else(Action == \"raise\", Equity * (PotBefore + CostOfWager) - (1 - Equity) * CostOfWager, NA_real_)`                                                                       | Expected value of a raise.                             |\n\nTable 3.1: Derived analytics columns with formulas and intuition\n\n##### Equity Proxy\n\nTo circumvent the time and processing power used to generate exact Monte-Carlo equity, we use approx_equity(hole, street) which looks up a fast pre-flop table (Chen formula) or a turn/river. This keeps latency \\< 30 ms per action so the live recorder stays responsive.\n\n##### Expected Value columns\n\nThree mutually exclusive columns (EV_call, EV_bet, EV_raise) are populated so that the EV-trend plot can call coalesce() and get the correct value regardless of action type. A dashed horizontal zero line in that plot lets players see at a glance which decisions gained or bled chips.\n",
    "supporting": [
      "03-transform_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}